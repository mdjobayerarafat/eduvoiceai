
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Youtube } from "lucide-react";
import type { TopicLectureOutput } from "@/ai/flows/topic-lecture-flow";
import ReactMarkdown from "react-markdown";

interface LectureDisplayProps {
  lecture: TopicLectureOutput;
  topic: string;
}

function getYouTubeVideoId(url: string): string | null {
  if (!url) return null;
  const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
  const match = url.match(regExp);
  if (match && match[2] && match[2].length === 11) {
    return match[2];
  }
  if (url.length === 11 && /^[a-zA-Z0-9_-]+$/.test(url)) {
    return url;
  }
  return null;
}


export function LectureDisplay({ lecture, topic }: LectureDisplayProps) {
  return (
    <Card className="mt-8">
      <CardHeader>
        <CardTitle className="font-headline text-2xl">Lecture: {topic}</CardTitle>
        <CardDescription>Generated by EduVoice AI</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <h3 className="font-headline text-xl font-semibold mb-2 text-primary">Summary</h3>
          <article className="prose prose-base lg:prose-lg max-w-none text-foreground">
            <ReactMarkdown>{lecture.summary}</ReactMarkdown>
          </article>
        </div>
        <Separator />
        <div>
          <h3 className="font-headline text-xl font-semibold mb-2 text-primary">Lecture Content</h3>
           <article className="prose prose-base lg:prose-lg max-w-none text-foreground">
            <ReactMarkdown>{lecture.lectureContent}</ReactMarkdown>
          </article>
        </div>
        {lecture.youtubeVideoLinks && lecture.youtubeVideoLinks.length > 0 && (
          <>
            <Separator />
            <div>
              <h3 className="font-headline text-xl font-semibold mb-3 text-primary">Relevant YouTube Videos</h3>
              <ul className="space-y-4">
                {lecture.youtubeVideoLinks.map((link, index) => {
                  const videoId = getYouTubeVideoId(link);

                  return (
                    <li key={index} className="group">
                      {videoId ? (
                        <div className="aspect-video rounded-lg overflow-hidden border shadow-md">
                          <iframe
                            width="100%"
                            height="100%"
                            src={`https://www.youtube.com/embed/${videoId}`}
                            title={`YouTube video player for ${topic} - Video ${index + 1}`}
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            allowFullScreen
                          ></iframe>
                        </div>
                      ) : (
                         <a
                          href={link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-accent hover:underline flex items-center p-2 border rounded-md hover:bg-muted"
                        >
                          <Youtube className="mr-2 h-5 w-5" /> Watch Video {index + 1} (Link may be invalid or for a non-embeddable video)
                        </a>
                      )}
                    </li>
                  );
                })}
              </ul>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  );
}
