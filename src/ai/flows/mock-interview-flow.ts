
'use server';

/**
 * @fileOverview Simulates a mock interview with an AI interviewer.
 * This flow now generates the first question for a mock interview.
 * Can use user-provided Gemini API key, with fallback.
 *
 * - getFirstInterviewQuestion - A function that generates the first interview question.
 * - InterviewConfigInput - The input type for generating the question (resume, job description, optional API key).
 * - FirstQuestionOutput - The return type, containing the first question.
 */

import { genkit as baseGenkit } from 'genkit';
import { googleAI } from '@genkit-ai/googleai';
import { ai } from '@/ai/genkit'; // Global AI instance
import { z } from 'genkit';

const InterviewConfigInputSchema = z.object({
  resume: z
    .string()
    .describe('The resume of the candidate, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.'),
  jobDescription: z.string().describe('The job description for the role the candidate is interviewing for.'),
  geminiApiKey: z.string().optional().describe('Optional Google Gemini API key to use for this request.'),
});
export type InterviewConfigInput = z.infer<typeof InterviewConfigInputSchema>;

const FirstQuestionOutputSchema = z.object({
  firstQuestion: z.string().describe("The first interview question generated by the AI interviewer based on the candidate's resume and the job description, including a brief opening greeting."),
});
export type FirstQuestionOutput = z.infer<typeof FirstQuestionOutputSchema>;

const FIRST_QUESTION_PROMPT_CONFIG_BASE = {
  name: 'firstQuestionPrompt',
  input: { schema: InterviewConfigInputSchema },
  output: { schema: FirstQuestionOutputSchema },
  prompt: `You are an AI Interviewer.
Based on the candidate's resume and the provided job description, your task is to:
1. Start with a brief, professional opening greeting (e.g., "Hello! I'm your AI interviewer for today. Let's begin with your first question.").
2. Generate the *first* relevant interview question to start the mock interview.

Job Description:
{{{jobDescription}}}

Candidate's Resume:
{{media url=resume}}

Please provide the greeting followed by the first question as a single string.
`,
};

const firstQuestionGlobalPrompt = ai.definePrompt(FIRST_QUESTION_PROMPT_CONFIG_BASE);

async function generateFirstQuestionLogic(input: InterviewConfigInput): Promise<FirstQuestionOutput> {
  let llmResponse;
  let userKeyFailed = false;

  if (input.geminiApiKey) {
    console.log("Attempting to use user-provided Gemini API key for first interview question.");
    const tempAi = baseGenkit({
      plugins: [googleAI({ apiKey: input.geminiApiKey })],
      model: ai.getModel(), 
    });
    const tempPrompt = tempAi.definePrompt({
      ...FIRST_QUESTION_PROMPT_CONFIG_BASE,
      name: `${FIRST_QUESTION_PROMPT_CONFIG_BASE.name}_userKeyed_${Date.now()}`,
    });
    try {
      const { output } = await tempPrompt(input);
      llmResponse = output;
      console.log("Successfully used user-provided Gemini API key for first question.");
    } catch (e: any) {
      console.warn("Error using user-provided Gemini API key for first question:", e.message);
      const errorMessage = (e.message || "").toLowerCase();
      const errorStatus = e.status || e.code;
      const errorType = (e.type || "").toLowerCase();
      if (
        errorMessage.includes("api key") ||
        errorMessage.includes("permission denied") ||
        errorMessage.includes("quota exceeded") ||
        errorMessage.includes("authentication failed") ||
        errorMessage.includes("invalid_request") ||
        errorType.includes("api_key") ||
        errorStatus === 401 || errorStatus === 403 || errorStatus === 429 ||
        (e.cause && typeof e.cause === 'object' && 'code' in e.cause && e.cause.code === 7)
      ) {
        userKeyFailed = true;
        console.log("User's API key failed for first question. Attempting fallback to platform key.");
      } else {
        throw e;
      }
    }
  }

  if (!input.geminiApiKey || userKeyFailed) {
     if (userKeyFailed) {
      console.log("Falling back to platform's default API key for first interview question.");
    } else {
      console.log("Using platform's default API key for first interview question (no user key provided or user key succeeded).");
    }
    if (!llmResponse) {
        const { output } = await firstQuestionGlobalPrompt(input);
        llmResponse = output;
    }
  }

  if (!llmResponse) {
    throw new Error("AI model did not return the expected output for the first question after all attempts.");
  }
  return llmResponse;
}

const firstQuestionFlow = ai.defineFlow(
  {
    name: 'firstQuestionFlow',
    inputSchema: InterviewConfigInputSchema,
    outputSchema: FirstQuestionOutputSchema,
  },
  generateFirstQuestionLogic
);

export async function getFirstInterviewQuestion(input: InterviewConfigInput): Promise<FirstQuestionOutput> {
  return firstQuestionFlow(input);
}
